import { Args, Flags } from '@oclif/core';
import VegaCommand, { VegaCommandOptions, selectWalletFlags } from '../../lib/vega-command.js';
import {
  getNativeBCHTokenInfo, bigIntToDecString, binToHex, bigIntFromDecString,
  cashlabTxResultSummaryJSON, convertUTXOToJSON, parseFractionFromString,
  parseOutpointFromInputArgument,
} from '../../lib/util.js';
import { ValueError } from '../../lib/exceptions.js';
import { MUSDV1_SYMBOL, MUSDV1_DECIMALS } from '../../lib/constants.js';
import type { Fraction } from '@cashlab/common';

export default class Moria1AddCollateral extends VegaCommand<typeof Moria1AddCollateral> {
  static args = {
    loan_outpoint: Args.string({
      name: 'loan_outpoint',
      required: true,
      description: "The outpoint of the loan nft utxo. <txid>:<index>",
    }),
    additional_amount: Args.string({
      name: 'additional_amount',
      required: true,
      description: "Additional colateral to add, The amount is a decimal number, 1.00000000 is equal to 100000000 sats or one bch.",
    }),
  };
  static flags = {
    ...selectWalletFlags(),
    'txfee-per-byte': Flags.string({
      description: 'Specify the txfee per byte in sats. The value can be a fraction.',
      required: true,
      default: '1',
    }),
    'broadcast': Flags.boolean({
      description: `Broadcast the transactions generated by the command.`,
    }),
  };
  static vega_options: VegaCommandOptions = {
    require_wallet_selection: true,
  };

  static description = ``;

  static examples = [
    `<%= config.bin %> <%= command.id %> <loan_outpoint> <additional_amount>`,
  ];

  async run (): Promise<any> {
    const { args, flags } = this;
    const {
      principalFromLoanCommitment,
    } = await import('@cashlab/moria/v1/util.js');
    const loan_outpoint = parseOutpointFromInputArgument(args.loan_outpoint, 'loan_outpoint');
    const bch_token_info = getNativeBCHTokenInfo();
    const wallet_name = this.getSelectedWalletName();
    const additional_amount = bigIntFromDecString(args.additional_amount, bch_token_info.decimals);
    if (!(additional_amount > 0n)) {
      throw new ValueError(`additional_amount should be greater than zero.`);
    }
    const broadcast = flags.broadcast;
    const txfee_per_byte: Fraction = parseFractionFromString(flags['txfee-per-byte'], true);
    const result = await this.callModuleMethod('moria1.loan-add-collateral', wallet_name, loan_outpoint, additional_amount, { broadcast, txfee_per_byte, verify: true });
    this.log('Summary:');
    try {
      const loan_commitment = result.loan_utxo.output.token.nft.commitment as Uint8Array;
      const loan_amount = principalFromLoanCommitment(loan_commitment);
      const collateral_amount = result.loan_utxo.output.amount;

      this.log(`  Transaction id: ${binToHex(result.txhash)}`);
      this.log(`  Loan amount: ${bigIntToDecString(loan_amount, MUSDV1_DECIMALS)} ${MUSDV1_SYMBOL}`);
      this.log(`  Collateral amount: ${bigIntToDecString(collateral_amount, bch_token_info.decimals)} ${bch_token_info.symbol}`);
      this.log(`  Transaction fee: ${result.txfee} sats`);
    } catch (err) {
      this.log(`  Parse error: [${(err as any).name}] ${(err as any).message}`);
    }
    return {
      ...cashlabTxResultSummaryJSON(result),
      fees: Object.fromEntries(Object.entries(result.fees).map((a) => [ a[0], typeof a[1] == 'bigint' ? a[1]+'' : a[1] ]).filter((a) => (a[1] as bigint) >= 0n)),
      ...Object.fromEntries([
        'loan_utxo', 'loan_agent_utxo',
      ].map((name) => [ name, convertUTXOToJSON(result[name]) ])),
    };
  }
}

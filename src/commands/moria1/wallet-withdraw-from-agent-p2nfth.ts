import { Args, Flags } from '@oclif/core';
import VegaCommand, { VegaCommandOptions, selectWalletFlags } from '../../lib/vega-command.js';
import {
  getNativeBCHTokenInfo, bigIntToDecString, binToHex, hexToBin, bigIntFromDecString,
  cashlabTxResultSummaryJSON, convertUTXOToJSON, parseFractionFromString,
  tokensBalanceDetailFromUTXOList, readableTokenBalance,
  BCMRIndexer,  buildTokensBCMRFromTokensIdentity,
} from '../../lib/util.js';
import type { TokensIdentity } from '../../lib/main/vega-file-storage-provider.js';

import { ValueError } from '../../lib/exceptions.js';
import { MUSDV1_SYMBOL, MUSDV1_DECIMALS } from '../../lib/constants.js';
import type { UTXOWithNFT, Fraction } from '@cashlab/common';

export default class Moria1WalltWithdrawFromAgentP2NFTH extends VegaCommand<typeof Moria1WalltWithdrawFromAgentP2NFTH> {
  static args = {
    agent_nfthash: Args.string({
      name: 'agent_nfthash',
      required: true,
      description: "The nfthash of the agent nft utxo.",
    }),
  };
  static flags = {
    ...selectWalletFlags(),
    'txfee-per-byte': Flags.string({
      description: 'Specify the txfee per byte in sats. The value can be a fraction.',
      required: true,
      default: '1',
    }),
    'broadcast': Flags.boolean({
      description: `Broadcast the transactions generated by the command.`,
    }),
  };
  static vega_options: VegaCommandOptions = {
    require_wallet_selection: true,
  };

  static description = ``;

  static examples = [
    `<%= config.bin %> <%= command.id %> -w <wallet_name> <agent_outpoint>`,
  ];

  async run (): Promise<any> {
    const { args, flags } = this;
    const tokens_identity: TokensIdentity = await this.callModuleMethod('vega_storage.get_tokens_identity');
    const bcmr_indexer = new BCMRIndexer(buildTokensBCMRFromTokensIdentity(tokens_identity));
    const wallet_name = this.getSelectedWalletName();
    const broadcast = flags.broadcast;
    const txfee_per_byte: Fraction = parseFractionFromString(flags['txfee-per-byte'], true);
    const result = await this.callModuleMethod('moria1.wallet-withdraw-from-agent-p2nfth', wallet_name, hexToBin(args.agent_nfthash), { broadcast, txfee_per_byte, verify: true });
    this.log('Summary:');
    this.log(`  Withdraw:`);
    for (const balance_item of tokensBalanceDetailFromUTXOList(result.payouts)) {
      const { symbol, amount } = readableTokenBalance(balance_item.token_id, balance_item.confirmed_balance + balance_item.unconfirmed_balance, bcmr_indexer);
      this.log(`          - ${symbol}: ${amount}`);
    }
    this.log(`  Transaction fee: ${result.txfee} sats`);
    this.log(`  Transaction id: ${binToHex(result.txhash)}`);
    return cashlabTxResultSummaryJSON(result);
  }
}

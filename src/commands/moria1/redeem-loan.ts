import { Args, Flags } from '@oclif/core';
import VegaCommand, { VegaCommandOptions, selectWalletFlags } from '../../lib/vega-command.js';
import {
  getNativeBCHTokenInfo, bigIntToDecString, binToHex, bigIntFromDecString,
  cashlabTxResultSummaryJSON, convertUTXOToJSON, parseFractionFromString,
  parseOutpointFromInputArgument,
} from '../../lib/util.js';
import { ValueError } from '../../lib/exceptions.js';
import { MUSDV1_SYMBOL, MUSDV1_DECIMALS } from '../../lib/constants.js';
import type { Fraction, TxResult } from '@cashlab/common';

export default class Moria1RedeemLoan extends VegaCommand<typeof Moria1RedeemLoan> {
  static args = {
    loan_outpoint: Args.string({
      name: 'loan_outpoint',
      required: true,
      description: "The outpoint of the loan nft utxo. <txid>:<index>",
    }),
  };
  static flags = {
    ...selectWalletFlags(),
    'split-payout-tokens': Flags.boolean({
      description: `Generates a secondary transaction to split the mixed bch/token payouts.`,
    }),
    'txfee-per-byte': Flags.string({
      description: 'Specify the txfee per byte in sats. The value can be a fraction.',
      required: true,
      default: '1',
    }),
    'broadcast': Flags.boolean({
      description: `Broadcast the transactions generated by the command.`,
    }),
  };
  static vega_options: VegaCommandOptions = {
    require_wallet_selection: true,
  };

  static description = ``;

  static examples = [
    `<%= config.bin %> <%= command.id %> <loan_outpoint>`,
  ];

  async run (): Promise<any> {
    const { args, flags } = this;
    const loan_outpoint = parseOutpointFromInputArgument(args.loan_outpoint, 'loan_outpoint');
    const bch_token_info = getNativeBCHTokenInfo();
    const wallet_name = this.getSelectedWalletName();
    const broadcast = flags.broadcast;
    const txfee_per_byte: Fraction = parseFractionFromString(flags['txfee-per-byte'], true);
    const result = await this.callModuleMethod('moria1.redeem-loan', wallet_name, loan_outpoint, {
      broadcast, txfee_per_byte, verify: true,
      split_payout_tokens: flags['split-payout-tokens'],
    });
    this.log('Summary:');
    this.log(`  Transaction id: ${binToHex(result.redeem_result.txhash)}`);
    this.log(`  Moria fees: ${result.redeem_result.fees.total} sats`);
    this.log(`  Transaction fee: ${result.redeem_result.txfee} sats`);
    return {
      redeem_result: {
        ...cashlabTxResultSummaryJSON(result.redeem_result),
        fees: Object.fromEntries(Object.entries(result.redeem_result.fees).map((a) => [ a[0], typeof a[1] == 'bigint' ? a[1]+'' : a[1] ]).filter((a) => (a[1] as bigint) >= 0n)),
        ...Object.fromEntries([
          'moria_utxo', 'delphi_utxo',
        ].map((name) => [ name, convertUTXOToJSON(result.redeem_result[name]) ])),
      },
      txlist: result.txlist.map((a: TxResult) => cashlabTxResultSummaryJSON(a)),
    };
  }
}

import { Args, Flags } from '@oclif/core';
import VegaCommand, { VegaCommandOptions, selectWalletFlags } from '../../lib/vega-command.js';
import {
  getNativeBCHTokenInfo, bigIntToDecString, binToHex, bigIntFromDecString,
  moriaTxResultSummaryJSON, convertUTXOToJSON,
} from '../../lib/util.js';
import { ValueError } from '../../lib/exceptions.js';
import { MUSDV0_SYMBOL, MUSDV0_DECIMALS } from '../../lib/constants.js';
import type { UTXOWithNFT } from '@cashlab/common';

export default class Moria0MintLoan extends VegaCommand<typeof Moria0MintLoan> {
  static args = {
    loan_amount: Args.string({
      name: 'loan_amount',
      required: true,
      description: "Loan amount in MUSD, A decimal number 1.00 is one dollar.",
    }),
    collateral_amount: Args.string({
      name: 'collateral_amount',
      required: true,
      description: "Colateral amount, At least it should be worth 150% of the loan amount. The amount is a decimal number, 1.00000000 is equal to 100000000 sats or one bch.",
    }),
  };
  static flags = {
    ...selectWalletFlags(),
    'txfee-per-byte': Flags.string({
      description: 'Specify the txfee per byte in sats.',
      required: true,
      default: '1',
    }),
    'broadcast': Flags.boolean({
      description: `Broadcast the transactions generated by the command.`,
    }),
  };
  static vega_options: VegaCommandOptions = {
    require_wallet_selection: true,
  };

  static description = ``;

  static examples = [
    `<%= config.bin %> <%= command.id %>`,
  ];

  async run (): Promise<any> {
    const { args, flags } = this;
    const bch_token_info = getNativeBCHTokenInfo();
    const wallet_name = this.getSelectedWalletName();
    const { default: MoriaV0 } = await import('@cashlab/moria/v0/index.js');
    const loan_amount = bigIntFromDecString(args.loan_amount, MUSDV0_DECIMALS);
    if (!(loan_amount >= BigInt(1 * MUSDV0_DECIMALS))) {
      throw new ValueError(`loan_amount should be greater than or equal to 1.0`);
    }
    const collateral_amount = bigIntFromDecString(args.collateral_amount, bch_token_info.decimals);
    if (!(collateral_amount > 0n)) {
      throw new ValueError(`collateral_amount should be greater than zero.`);
    }
    const broadcast = flags.broadcast;
    const txfee_per_byte: bigint = BigInt(flags['txfee-per-byte']);
    if (txfee_per_byte < 0n) {
      throw new Error('txfee-per-byte should be a positive integer');
    }
    const result = await this.callModuleMethod('moria0.mint-loan', wallet_name, loan_amount, collateral_amount, { broadcast, txfee_per_byte, verify: true });
    this.log('Summary:');
    try {
      const loan_params = MoriaV0.parseParametersFromLoanNFTCommitment(result.loan_utxo.output.token.nft.commitment);
      this.log(`  Loan amount: ${bigIntToDecString(loan_params.amount, MUSDV0_DECIMALS)} ${MUSDV0_SYMBOL}`);
      this.log(`  Collateral amount: ${bigIntToDecString(result.loan_utxo.output.amount, bch_token_info.decimals)} ${bch_token_info.symbol}`);
      this.log(`  Oracle use fee: ${result.oracle_use_fee} sats`);
      this.log(`  Transaction fee: ${result.txfee} sats`);
    } catch (err) {
      this.log(`  Parse error: [${(err as any).name}] ${(err as any).message}`);
    }
    return {
      ...moriaTxResultSummaryJSON(result),
      loan_utxo: convertUTXOToJSON(result.loan_utxo),
      oracle_use_fee: result.oracle_use_fee+'',
    };
  }
}
